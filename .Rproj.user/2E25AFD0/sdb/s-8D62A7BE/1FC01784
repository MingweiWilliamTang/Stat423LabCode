{
    "contents" : "  # for bivariate data\nx<-cars$speed\ny<-cars$dist\n\nplot(x,y,xlab=\"speed\",ylab=\"dist\",main=\"dist vs speed for cars data\")\n\n# change point type \"pch=1,2,3,...\", cex is the size of the points\n\nplot(x,y,pch=20,col=\"red\",xlab=\"speed\",\n     ylab=\"dist\",main=\"dist vs speed for cars data\",cex=1.5)\n\n# covariance\n# r function\n\ncov.byR = cov(x,y)\ncov.byR\ncov(x+3,y-1)\ncov(2*x,y)\n\ncov(2*x,3*y)\n\ncov(2*x,-3*y)\n# by hand\n\nn=length(x)\ncov.byHand = sum((x-mean(x))*(y-mean(y)))/(n-1)\nall.equal(cov.byR,cov.byHand)\n\n# correlation\n# by r\ncor.byR = cor(x,y)\ncor.byR\ncor(2*x+3,3*y-1)\nall.equal(cor.byR,cor(2*x+3,3*y-1))\ncor(2*x,-3*y-1)\n\n# by hand\ncor.byHand = cov.byHand/(sd(x)*sd(y))\nall.equal(cor.byR,cor.byHand)\n\nSXX = sum((x-mean(x))^2)\nSYY = sum((y-mean(y))^2)\nSXY= sum((x-mean(x))*(y-mean(y)))\ncor.byHand2 = SXY / sqrt(SXX * SYY)\nall.equal(cor.byHand2,cor.byHand)\n\n# more on plot\ncars\ncartype = as.factor(rep(c(1,2),each = 25))\ncartype\nnewdata = data.frame(speed =x ,dist = y , cartype = cartype)\n\nhead(newdata)\ntail(newdata)\n\nboxplot(speed~cartype,data = newdata,names = c(\"compact\",\"sports\"))\n\nboxplot(speed~cartype,data = newdata,names = c(\"compact\",\"sports\"),\n        col=c(\"red\",\"green\"))\n\n\n# scatterplot for two types of cars \nplot(newdata$speed,newdata$dist,pch=20)\n# you can use the with function to get rid of the \"$\" sign is dataframe\nwith(newdata,plot(speed,dist,pch=20,main=\"dist vs speed\"))\n\n# now we draw the two type of cars in different color\nwith(subset(newdata,cartype==1),plot(speed,dist,pch=20,\n                                     main=\"dist vs speed\",col=\"red\"))\n\nwith(subset(newdata,cartype==2),plot(speed,dist,pch=20,\n                                     main=\"dist vs speed\",col=\"red\"))\n\n# it overlaps the previous plot, the solution is to use points \nwith(subset(newdata,cartype==1),plot(speed,dist,pch=20,xlim=c(0,30),ylim=c(0,150),cex=1.5,\n                                     main=\"dist vs speed\",col=\"red\"))\n\n\nwith(subset(newdata,cartype==2),points(speed,dist,pch=2,cex=1.5,\n                                     main=\"dist vs speed\",col=\"blue\"))\n\n\n# adding legends to the plot\nlegend(0,150,legend=c(\"compact\",\"sports\"),pch=c(20,2),col=c(\"red\",\"blue\"))\n\n# or your can use \"topleft\", \"topright\", \"bottomleft\",\"bottomright\" to\n# specify the location of the legend\n\nlegend(\"bottomright\",legend=c(\"compact\",\"sports\"),pch=c(20,2),col=c(\"red\",\"blue\"))\n\n\n\n# now some instructions on linear regression\n# the syntax is similar as in 421\n\ncars.lm = lm(dist~speed,data=newdata)\ncars.lm\n\ncars.lm$coefficients\n\n# add the regression line to the plot: abline\n# for abline, you input the slope and intercept of the line your want to draw\nabline(cars.lm$coefficients[1],cars.lm$coefficients[2])\n\n# an easier way\nabline(cars.lm,col=\"green\",lwd=2)\n\n# you can also use abline to draw horizontal or vertical lines\n# horizontal case\nabline(h=50,lty=2)\n\n# vertical casse\nabline(v=15,lty=2)\n\ncars.lm$fitted.values\n\npoints(newdata$speed,cars.lm$fitted.values,pch=1)\n\n# or you can use \nfitted(cars.lm)\nall.equal(fitted(cars.lm),cars.lm$fitted.values)\n\n\nsummary(cars.lm)\n# calculating the p-value\n2*(1-pt(2.601,df=48))\n2*(1-pt(9.464,df=48))\n\ncar.lm.sum = summary(cars.lm)\ncar.lm.sum$\n\n\n\n",
    "created" : 1452119419374.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3795142698",
    "id" : "1FC01784",
    "lastKnownWriteTime" : 1452125989,
    "path" : "~/Dropbox/423/423codes/lab1.R",
    "project_path" : "lab1.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}