{
    "contents" : "# lab2 Linear model, overfitting and cross-validation\n# Heights<-read.table(\"http://www.math.uah.edu/stat/data/Galton.txt\",header=T)\nset.seed(423)\nn=1000\nx = runif(1000,55,72)\ny= x*0.21 + 90 - x^2*0.01   + rnorm(1000,0,3.5)\nplot(x,y)\nx= round(x)\ny=round(y)\nHeights=data.frame(Mother=x,Son=y)\nhead(Heights)\nwith(Heights,plot(Mother,Son))\n# there are many points overlap, to have better visualization, we can use \n# jatter function\n# the location of point will be randomly and slightly changed\njx = jitter(x)\njy = jitter(y)\nplot(jx,jy,xlab=\"Mother\",ylab=\"son\")\n\n\nHeight.cond.mean=with(Heights,tapply(Son,Mother,mean))\nHeight.cond.mean\nclass(Height.cond.mean)\nux = sort(unique(Heights$Mother))\nux\n# match function returns the index of the an element in a vector\nmatch(55,ux)\nmatch(c(56,58,72),ux)\n\n# plot the mean of the first cluster\nxs=55\npar(mfrow=c(1,1),mar=c(3,3,1,1),mgp=c(1.75,.75,0))\nplot(jx,jy)\npoints(jx[x==xs],jy[x==xs],col=\"blue\")\npoints(55:xs,Height.cond.mean[ match(55:xs,ux) ], col=\"red\",pch=\"X\",cex=2)\nlines(55:xs,Height.cond.mean[ match(55:xs,ux) ], col=\"red\") \n\n# another way to do\nnames(Height.cond.mean)\n\n\n# change that into a numerical vector\nux2=as.numeric(names(Height.cond.mean))\nux2\n\nxs=55\npar(mfrow=c(1,1),mar=c(3,3,1,1),mgp=c(1.75,.75,0))\nplot(jx,jy)\npoints(jx[x==xs],jy[x==xs],col=\"blue\")\npoints(55:xs,Height.cond.mean[ match(55:xs,ux2) ], col=\"red\",pch=\"X\",cex=2)\nlines(55:xs,Height.cond.mean[ match(55:xs,ux2) ], col=\"red\") \n\n#\nxs<-56\npar(mfrow=c(1,1),mar=c(3,3,1,1),mgp=c(1.75,.75,0))\nplot(jx,jy)\npoints(jx[x==xs],jy[x==xs],col=\"blue\")\npoints(55:xs,Height.cond.mean[ match(55:xs,ux) ], col=\"red\",pch=\"X\",cex=2)\nlines(55:xs,Height.cond.mean[ match(55:xs,ux) ], col=\"red\",cex=2,lwd=2) \n\n# using a for loop to label all the condition mean value\nxs=max(x)\npar(mfrow=c(1,1),mar=c(3,3,1,1),mgp=c(1.75,.75,0))\nplot(jx,jy)\npoints(jx[x==xs],jy[x==xs],col=\"blue\")\npoints(55:xs,Height.cond.mean[ match(55:xs,ux) ], col=\"red\",pch=\"X\",cex=2)\nlines(55:xs,Height.cond.mean[ match(55:xs,ux) ], col=\"red\",cex=2,lwd=2) \n\n# the third way to do, use anova\nanova.1=lm(Son~as.factor(Mother)-1,data=Heights)\ncond.mean2=anova.1$coefficients\ncond.mean2\npar(mfrow=c(1,1),mar=c(3,3,1,1),mgp=c(1.75,.75,0))\nplot(jx,jy)\npoints(55:xs,cond.mean2[ match(55:xs,ux) ], col=\"red\",pch=\"X\",cex=2)\nlines(55:xs,Height.cond.mean[ match(55:xs,ux) ], col=\"red\",cex=2,lwd=2)\n\n\n# residual plot \n\nplot(anova.1$fitted.values,anova.1$residuals)\nabline(h=0,lty=2)\n\n\n\n# simple linear regression model\nplot(jx,jy,xlab=\"Mother\",ylab=\"Son\")\nlm.1 = with(Heights,lm(Son~Mother))\nabline(lm.1,lwd=2,col=\"purple\")\nsummary(lm.1)\nSXY=sum((x-mean(x))*(y-mean(y)))\nSXX=sum((x-mean(x))^2)\nbeta=SXY/SXX\nalpha=mean(y)-beta*mean(x)\nc(alpha,beta)\nsummary(lm.1)$coef\n# residual plot\nplot(lm.1$fitted.values,lm.1$residuals,ylab=\"residual\",xlab=\"fitted\")\nabline(h=0,lty=2)\n\n\n\n\n\n# now compare the models\nplot(jx,jy,xlab=\"Mother\",ylab=\"Son\")\npoints(55:xs,Height.cond.mean[ match(55:xs,ux) ], col=\"red\",pch=\"X\",cex=2)\nlines(55:xs,Height.cond.mean[ match(55:xs,ux) ], col=\"red\",cex=2,lwd=2) \nabline(lm.1,lwd=2,col=\"purple\")\nlegend(\"topleft\",legend=c(\"empirical mean\",\"SLR\"),lty=1,col=c(\"red\",\"purple\"),lwd=2)\n\n## compare RSS\nRSS.emprical=sum((anova.1$residuals)^2)\nRSS.lm = sum((lm.1$residuals)^2)\n\nRSS.emprical\nRSS.lm\n\n # Question: Is empircal conditional a better model than linear regression? \n\n# Using cross-validation\ny_ls<-y_np<-NULL\n\n# leave-one-out-cross valiadation\n\nfor(i in 1:n){\n  xmi<-x[-i]  \n  ymi<-y[-i]    \n  \n  bmi<-lm(ymi~xmi)$coef\n  y_ls<-c(y_ls, bmi[1] + bmi[2]*x[i] )\n  \n  y_np<-c(y_np,mean(ymi[xmi==x[i]]) )\n  \n}\n  \nmean( (y-y_ls)^2 ) \n\nmean( (y-y_np)^2 )  \n\n\n\n# multiple linear regression\n\n\nlm.2 = with(Heights,lm(Son~Mother + I(Mother^2)))\ns ummary(lm.2)\nodr = order(Heights$Mother)\nplot(jx,jy,xlab=\"Mother\",ylab=\"Son\")\nwith(Heights[odr,],lines(Mother,predict(lm.2)[odr],type=\"l\",col=\"red\",lwd=2))\nabline(lm.1) \n\n",
    "created" : 1452682202482.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "563494939",
    "id" : "3A4E9C1A",
    "lastKnownWriteTime" : 1452821044,
    "path" : "~/Dropbox/423/423codes/lab2.R",
    "project_path" : "lab2.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}